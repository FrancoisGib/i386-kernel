#ifndef __GDT_H__
#define __GDT_H__

#include <stdint.h>
#include "lib.h"

typedef enum
{
    DESCRIPTOR_INVALID = 0,
    DESCRIPTOR_PRESENT = 1
} descriptor_presence_t;

typedef enum
{
    DESCRIPTOR_TYPE_SYSTEM = 0,
    DESCRIPTOR_TYPE_SEGMENT = 1
} descriptor_type_t;

typedef enum
{
    SEG_TYPE_DATA_READ_ONLY = 0x0,
    SEG_TYPE_DATA_READ_ONLY_ACCESSED = 0x1,
    SEG_TYPE_DATA_READ_WRITE = 0x2,
    SEG_TYPE_DATA_READ_WRITE_ACCESSED = 0x3,
    SEG_TYPE_DATA_READ_ONLY_EXPAND_DOWN = 0x4,
    SEG_TYPE_DATA_READ_ONLY_EXPAND_DOWN_ACCESSED = 0x5,
    SEG_TYPE_DATA_READ_WRITE_EXPAND_DOWN = 0x6,
    SEG_TYPE_DATA_READ_WRITE_EXPAND_DOWN_ACCESSED = 0x7
} segment_type_data_t;

typedef enum
{
    SEG_TYPE_CODE_EXECUTE_ONLY = 0x8,
    SEG_TYPE_CODE_EXECUTE_ONLY_ACCESSED = 0x9,
    SEG_TYPE_CODE_EXECUTE_READ = 0xA,
    SEG_TYPE_CODE_EXECUTE_READ_ACCESSED = 0xB,
    SEG_TYPE_CODE_EXECUTE_ONLY_CONFORMING = 0xC,
    SEG_TYPE_CODE_EXECUTE_ONLY_CONFORMING_ACCESSED = 0xD,
    SEG_TYPE_CODE_EXECUTE_READ_CONFORMING = 0xE,
    SEG_TYPE_CODE_EXECUTE_READ_CONFORMING_ACCESSED = 0xF
} segment_type_code_t;

typedef enum
{
    SYS_SEG_TYPE_LDT = 0x2,
    SYS_SEG_TYPE_TSS_AVAILABLE = 0x9,
    SYS_SEG_TYPE_TSS_BUSY = 0xB,
    SYS_SEG_TYPE_CALL_GATE_16 = 0x4,
    SYS_SEG_TYPE_CALL_GATE_32 = 0xC,
    SYS_SEG_TYPE_INTERRUPT_GATE_16 = 0x6,
    SYS_SEG_TYPE_INTERRUPT_GATE_32 = 0xE,
    SYS_SEG_TYPE_TRAP_GATE_16 = 0x7,
    SYS_SEG_TYPE_TRAP_GATE_32 = 0xF
} segment_type_system_t;

typedef enum
{
    AVAILABLE_FALSE = 0,
    AVAILABLE_TRUE = 1
} available_t;

typedef enum
{
    DEFAULT_OPERATION_SIZE_16 = 0,
    DEFAULT_OPERATION_SIZE_32 = 1
} default_op_size_t;

typedef enum
{
    LONG_MODE_I386 = 0,
    LONG_MODE_X64 = 1
} long_mode_t;

typedef enum
{
    GRANULARITY_BYTE = 0,
    GRANULARITY_PAGE = 1
} granularity_t;

void init_gdt(void);

#endif // __GDT_H__